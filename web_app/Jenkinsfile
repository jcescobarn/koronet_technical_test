pipeline {
    agent any

    tools { 
        go '1.23' 
    }

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub_credentials'
        DOCKER_IMAGE_NAME = 'koronet_web_app'
        AWS_CREDENTIALS_ID = 'aws_credentials'
        EKS_CLUSTER_NAME = 'koronet_interview'
        AWS_REGION = 'us-east-1'
        EKS_DEPLOYMENT_NAME = 'deployment.yml'
    }

    stages {
        stage("Init"){
            steps {
                script {
                    def dockerHome = tool 'docker'
                    env.PATH = "${dockerHome}/bin:${env.PATH}"

                    def awsCliInstalled = sh(script: 'command -v aws', returnStatus: true) == 0
                    if (!awsCliInstalled) {
                        echo 'AWS CLI not installed'
                        sh '''
                        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                        unzip awscliv2.zip
                        ./aws/install
                        aws --version
                        '''
                    } else {
                        echo 'AWS CLI installed'
                    }
                }
            }
        }

        stage('Build App'){
            steps {
                script {
                    dir('web_app'){
                        echo 'Step 1: List files'
                        sh 'ls' 

                        echo 'Step 2: Install dependencies'
                        sh "go mod tidy"

                        echo 'Step 3: Build Go app'
                        sh 'go build -o app .'

                        echo 'Step 4: List to confirm'
                        sh "ls -la app"
                    }
                }
            }
        }

        stage('Build Docker Image'){
            steps{
                script {
                    dir('web_app'){
                        echo 'Step 1: Build Docker image'
                        def customImage = docker.build("${DOCKER_IMAGE_NAME}:${env.BUILD_ID}", "-f Dockerfile.deploy .")


                        echo 'Step 2: Verify image'
                        sh 'docker images'
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
               script {

                    def scoutInstalled = sh(script: "command -v docker-scout", returnStatus: true) == 0
                    if (!scoutInstalled){
                        echo 'Step 1: Install Docker Scout'
                        sh 'curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b $PWD'
                        sh 'docker --version'
                    } else {
                        echo 'Docker Scout is already installed'
                    }

                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        echo 'Step 2: Log into Docker Hub'
                        sh "echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin"

                        echo 'Step 3: Analyze the image'
                        def scoutResult = sh(script: "./docker-scout cves ${DOCKER_IMAGE_NAME}:${env.BUILD_ID} --exit-code --only-severity critical,high", returnStatus: true)

                        if (scoutResult != 0) {
                            error "The image has vulnerabilities"
                        } else {
                            echo 'The image has no vulnerabilities'
                        } 
                    }
                } 
            }
        }

        stage('Push to Dockerhub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        def dockerImageName = "${DOCKER_IMAGE_NAME}:${env.BUILD_ID}"

                        echo 'Step 2: Tag the image'
                        sh "docker tag ${dockerImageName} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${env.BUILD_ID}"

                        def pushResult = sh(script: "docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${env.BUILD_ID}", returnStatus: true)

                        if (pushResult != 0){
                            error "Error pushing the Docker image to DockerHub"
                        } else {
                            echo "The image ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${env.BUILD_ID} was uploaded successfully."
                        }
                    }
                }
            }
        }
        stage('Configure AWS EKS Context') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${AWS_CREDENTIALS_ID}", usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]){
                        sh """
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                            aws_configure set region ${AWS_REGION}
                        """

                        echo 'Step 2: Update kubeconfig for EKS cluster'
                        sh "aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME} --region ${AWS_REGION}"
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                echo 'Step 1: Deploy to EKS'
                sh """
                    kubectl set image deployment/${EKS_DEPLOYMENT_NAME} ${DOCKER_IMAGE_NAME}=${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${env.BUILD_ID}
                    kubectl rollout status deployment/${EKS_DEPLOYMENT_NAME}

                """
            }
        }

        stage("Clean Agent") {
           steps {
                echo 'Cleaning up workspace'
                cleanWs()
            }
        }

    }
}
