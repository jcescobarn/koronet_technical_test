pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub_credentials'
        DOCKER_IMAGE_NAME = 'koronet_web_app'
    }

    stages {
        stage("Configure agent") {
            steps {
                script {
                    def goVersionCheck = sh(script: "go version || true", returnStatus: true)
                    if (goVersionCheck != 0) {
                        echo 'Go is not installed, proceeding with installation'
                        sh '''
                            wget https://go.dev/dl/go1.23.linux-amd64.tar.gz
                            sudo tar -C /usr/local -xzf go1.23.linux-amd64.tar.gz
                            echo "export PATH=$PATH:/usr/local/go/bin" >> ~/.bashrc
                            export PATH=$PATH:/usr/local/go/bin
                            go version
                        '''
                        echo 'Go has been installed'
                    } else {
                        echo 'Go is already installed'
                    }
                }
            }
        }

        stage('Build App'){
            steps {
                script {
                    echo 'Step 1: Install dependencies'
                    sh "go mod tidy"

                    echo 'Step 2: Build Go app'
                    sh 'go build -o app .'

                    echo 'Step 3: List to confirm'
                    sh "ls -la app"
                }
            }
        }

        stage('Build Docker Image'){
            steps{
                script {
                    echo 'Step 1: Build Docker image'
                    sh 'docker build -f Dockerfile.deploy-t ${DOCKER_IMAGE_NAME}:${env.BUILD_ID} .'

                    echo 'Step 2: Verify image'
                    sh 'docker images'
                }
            }
        }

        stage('Run Tests') {
            steps {
               script {
                    echo 'Step 1: Check image with Docker Scout'
                    def scoutResult = sh(script: 'docker scout cves ${DOCKER_IMAGE_NAME}:${env.BUILD_ID}', returnStatus: true)

                    if (scoutResult != 0){
                        error "The image has vulnerabilities"
                    } else {
                        echo 'The image has no vulnerabilities'
                    }
                } 
            }
        }

        stage('Push to Dockerhub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        def dockerImageName = "${DOCKER_IMAGE_NAME}:${env.BUILD_ID}"

                        echo 'Step 1: Signing in Dockerhub'
                        sh 'echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin'

                        echo 'Step 2: Tag the image'
                        sh 'docker tag ${dockerImageName} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${env.BUILD_ID}'

                        def pushResult = sh(script: "docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${env.BUILD_ID}", returnStatus: true)

                        if (pushResult != 0){
                            error "Error pushing the Docker image to DockerHub"
                        } else {
                            echo "The image ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE_NAME}:${env.BUILD_ID} was uploaded successfully."
                        }
                    }
                }
            }
        }

        stage("Clean Agent") {
           steps {
                echo 'Cleaning up workspace'
                cleanWs()
            }
        }

    }
}
